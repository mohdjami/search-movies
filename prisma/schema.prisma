

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
}

model Account {
  id    String  @id @default(uuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  username      String?   @unique
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  resetToken    String?
  resetTokenExpiry DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlists      Playlist[]
}

model VerificationToken {
  id    String  @id @default(uuid())  @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id    String  @id @default(uuid()) @map("_id")
  title       String 
  type        String?  
  year        Int?
  poster      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  playlist Playlist? @relation(fields: [playlistId], references: [id], onDelete: SetNull)
  playlistId String?
}

model Playlist {
  id    String  @id @default(uuid()) @map("_id")
  name        String 
  description String?
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  movies      Movie[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  visibility  Boolean
}
